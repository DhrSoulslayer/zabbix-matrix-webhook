zabbix_export:
  version: "5.2"
  date: "2021-02-24T14:57:02Z"
  media_types:
    - name: Matrix
      type: WEBHOOK
      description: |
        https://github.com/jooola/zabbix-matrix-webhook#readme
      parameters:
        - name: server
          value: <server>
        - name: token
          value: <token>
        - name: room
          value: "{ALERT.SENDTO}"
        - name: subject
          value: "{ALERT.SUBJECT}"
        - name: message
          value: "{ALERT.MESSAGE}"
        - name: severity
          value: "{EVENT.NSEVERITY}"
        - name: is_problem
          value: "{EVENT.VALUE}"
        - name: is_update
          value: "{EVENT.UPDATE.STATUS}"
        - name: enable_colors
          value: "true"
        - name: enable_icons
          value: "true"
        - name: http_proxy
          value: ""
      message_templates:
        - event_source: TRIGGERS
          operation_mode: PROBLEM
          subject: "Problem: {EVENT.NAME}"
          message: |
            Problem started at {EVENT.TIME} on {EVENT.DATE}
            Problem name: {EVENT.NAME}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Operational data: {EVENT.OPDATA}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: RECOVERY
          subject: "Resolved in {EVENT.DURATION}: {EVENT.NAME}"
          message: |
            Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Problem name: {EVENT.NAME}
            Problem duration: {EVENT.DURATION}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: UPDATE
          subject: "Updated problem in {EVENT.AGE}: {EVENT.NAME}"
          message: |
            {USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}
            {EVENT.UPDATE.MESSAGE}

            Current problem status: {EVENT.STATUS}
            Age: {EVENT.AGE}
            Acknowledged: {EVENT.ACK.STATUS}
      script: |
        const required_input = [
          "server",
          "room",
          "token",

          "subject",
          "message",
          "severity",
          "is_problem",
          "is_update",

          "enable_colors",
          "enable_icons",
        ]

        const update_color = "#000000"
        const recovery_color = "#098e68"
        const severity_colors = [
          "#5a5a5a", // Not classified
          "#2caed6", // Information
          "#d6832c", // Warning
          "#d6542c", // Average
          "#d62c2c", // High
          "#ff0000", // Disaster
        ]
        const recovery_icon = String.fromCodePoint("0x2705")
        const severity_icons = [
          String.fromCodePoint("0x2754"), // Not classified
          String.fromCodePoint("0x2139"), // Information
          String.fromCodePoint("0x26A0"), // Warning
          String.fromCodePoint("0x274C"), // Average
          String.fromCodePoint("0x1F525"), // High
          String.fromCodePoint("0x1F4A5"), // Disaster
        ]

        var Matrix = {
          validate: function (params) {
            required_input.forEach(function (key) {
              if (key in params && params[key] != undefined) {
                Matrix[key] = params[key]
              } else {
                throw "Missing value for key: " + key
              }
            })

            Matrix.subject = Matrix.subject.replace(/\r/g, "")
            Matrix.message = Matrix.message.replace(/\r/g, "")

            Matrix.severity = parseInt(Matrix.severity)
            Matrix.is_problem = parseInt(Matrix.is_problem)
            Matrix.is_update = parseInt(Matrix.is_update)
            Matrix.enable_colors = Matrix.enable_colors.toLowerCase() == "true"
            Matrix.enable_icons = Matrix.enable_icons.toLowerCase() == "true"

            if (Matrix.is_problem == 1) {
              if (Matrix.is_update == 0) {
                Matrix.kind = "problem"
                Matrix.color = severity_colors[Matrix.severity]
                Matrix.icon = severity_icons[Matrix.severity]
              } else {
                Matrix.kind = "update"
                Matrix.color = update_color
                Matrix.icon = false
              }
            } else {
              Matrix.kind = "recovery"
              Matrix.color = recovery_color
              Matrix.icon = recovery_icon
            }

            if (typeof params.http_proxy === "string" && params.http_proxy.trim() !== "") {
              Matrix.http_proxy = params.http_proxy
            }
          },

          request: function (path, payload) {
            var request = new HttpRequest()
            request.addHeader("Content-Type: application/json")
            request.addHeader("Authorization: Bearer " + Matrix.token)

            var url = Matrix.server + path

            Zabbix.Log(4, "[Matrix Webhook] new request to: " + url)

            if (Matrix.http_proxy != undefined) {
              request.setProxy(Matrix.http_proxy)
            }

            var blob = request.post(url, JSON.stringify(payload))

            if (request.getStatus() !== 200) {
              var resp = JSON.parse(blob)

              if (request.getStatus() == 403 && resp.error.indexOf("not in room") !== -1) {
                throw "User is not in room"
              }

              Zabbix.Log(4, "[Matrix Webhook] Request failed: " + resp.error)
              throw "Request failed: " + request.getStatus() + " " + resp.error
            }
          },

          joinRoom: function () {
            Matrix.request("/_matrix/client/r0/rooms/" + Matrix.room + "/join", {})
          },

          sendMessage: function () {
            var body = ""
            if (Matrix.enable_icons && Matrix.icon) {
              body += Matrix.icon + " "
            }
            body += Matrix.subject + "\n"
            body += Matrix.message

            var formatted_body = ""
            if (Matrix.enable_colors) {
              formatted_body += '<span data-mx-color="{color}">'.replace("{color}", Matrix.color)
            } else {
              formatted_body += "<span>"
            }

            formatted_body += "<strong>"
            if (Matrix.enable_icons && Matrix.icon) {
              formatted_body += Matrix.icon + " "
            }
            formatted_body += Matrix.subject
            formatted_body += "</strong><br />"

            formatted_body += Matrix.message.replace(/\n/g, "<br />")
            formatted_body += "</span>"

            const payload = {
              body: body,
              msgtype: "m.text",
              format: "org.matrix.custom.html",
              formatted_body: formatted_body,
            }

            Matrix.request("/_matrix/client/r0/rooms/" + Matrix.room + "/send/m.room.message", payload)
          },
        }

        try {
          var params = JSON.parse(value)

          Matrix.validate(params)

          try {
            Matrix.sendMessage()
          } catch (error) {
            if (error == "User is not in room") {
              Matrix.joinRoom()
              Matrix.sendMessage()
            } else {
              throw error
            }
          }

          return "OK"
        } catch (error) {
          Zabbix.Log(4, "[Matrix Webhook] Error: " + error)
          throw "Sending failed: " + error
        }
