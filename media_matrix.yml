zabbix_export:
  version: "5.2"
  date: "2021-02-24T14:57:02Z"
  media_types:
    - name: Matrix
      type: WEBHOOK
      parameters:
        - name: server
          value: "<server>"
        - name: token
          value: "<token>"
        - name: room
          value: "{ALERT.SENDTO}"

        - name: message
          value: "{ALERT.MESSAGE}"
        - name: severity
          value: "{EVENT.NSEVERITY}"
        - name: is_problem
          value: "{EVENT.VALUE}"
        - name: is_update
          value: "{EVENT.UPDATE.STATUS}"

      message_templates:
        - event_source: TRIGGERS
          operation_mode: PROBLEM
          subject: "Problem: {EVENT.NAME}"
          message: |
            Problem started at {EVENT.TIME} on {EVENT.DATE}
            Problem name: {EVENT.NAME}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Operational data: {EVENT.OPDATA}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: RECOVERY
          subject: "Resolved in {EVENT.DURATION}: {EVENT.NAME}"
          message: |
            Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Problem name: {EVENT.NAME}
            Problem duration: {EVENT.DURATION}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: UPDATE
          subject: "Updated problem in {EVENT.AGE}: {EVENT.NAME}"
          message: |
            {USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}
            {EVENT.UPDATE.MESSAGE}

            Current problem status: {EVENT.STATUS}
            Age: {EVENT.AGE}
            Acknowledged: {EVENT.ACK.STATUS}
      script: |
        const input = [
            'server',
            'room',
            'token',

            'message',
            'severity',
            'is_problem',
            'is_update',
        ]

        const update_color = '#d2d2d2'
        const recovery_color = '#86cc89'
        const severity_colors = [
            '#97aab3', // Not classified
            '#7499ff', // Information
            '#ffc859', // Warning
            '#ffa059', // Average
            '#e97659', // High
            '#e45959', // Disaster
        ]

        var Matrix = {
            validate: function (params) {
                input.forEach(function (key) {
                    if (key in params && params[key] != undefined) {
                        Matrix[key] = params[key]
                    } else {
                        throw 'Missing value for key: ' + key
                    }
                })

                Matrix.severity = parseInt(Matrix.severity)
                Matrix.is_problem = parseInt(Matrix.is_problem)
                Matrix.is_update = parseInt(Matrix.is_update)

                if (Matrix.is_problem == 1) {
                    if (Matrix.is_update == 0) {
                        Matrix.kind = 'problem'
                        Matrix.color = severity_colors[Matrix.severity]
                    } else {
                        Matrix.kind = 'update'
                        Matrix.color = update_color
                    }
                } else {
                    Matrix.kind = 'recovery'
                    Matrix.color = recovery_color
                }
            },

            request: function (path, payload) {
                var request = new CurlHttpRequest()
                request.AddHeader('Content-Type: application/json')
                request.AddHeader('Authorization: Bearer ' + Matrix.token)

                var url = Matrix.server + path

                Zabbix.Log(4, '[Matrix Webhook] new request to: ' + url)

                var blob = request.Post(url, JSON.stringify(payload))

                if (request.Status() !== 200) {
                    var resp = JSON.parse(blob)
                    throw 'Request failed: ' + request.Status() + ' ' + resp.error
                }
            },

            sendMessage: function () {
                Matrix.messageFormatted = '<span data-mx-color="' + Matrix.color + '">'
                    + Matrix.message.replace(/\n/g, '<br>')
                    + '</span>'

                Matrix.request(
                    '/_matrix/client/r0/rooms/' + Matrix.room + '/send/m.room.message',
                    {
                        msgtype: 'm.text',
                        body: Matrix.message,
                        format: 'org.matrix.custom.html',
                        formatted_body: Matrix.messageFormatted,
                    }
                )
            },
        }

        try {
            var params = JSON.parse(value)

            Matrix.validate(params)
            Matrix.sendMessage()

            return 'OK'
        } catch (error) {
            Zabbix.Log(4, '[Matrix Webhook] Error: ' + error)
            throw 'Sending failed: ' + error
        }
